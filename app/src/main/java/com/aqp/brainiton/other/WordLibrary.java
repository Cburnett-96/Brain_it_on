package com.aqp.brainiton.other;

import android.content.Context;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import com.aqp.brainiton.R;

public class WordLibrary {

    public static Map<String,String> getQuestionsStage1(){
        HashMap<String,String> questions = new HashMap<>();
        questions.put("not capable of or susceptible to change.","Immutable");
        questions.put("to bring about or cause (something that is harmful or damaging).","Wreak");
        questions.put("”a small piece or part” of something, and is often used as a synonym of scrap.","Shard");
        questions.put("of little worth or importance.","Trivial");
        questions.put("is a clever retort or retaliatory measure.","Riposte");
        questions.put("is used as a synonym of very and means “to a high degree.”","Eminently");
        questions.put("a dispute between parties is to make an official decision about which party is right.","Adjudicate");
        questions.put("is typically used to mean “somewhat salty,” and most often describes water or bodies of water, such as rivers, lakes, and estuaries.","Brackish");
        questions.put("to play and run about happily.","Frolic");
        questions.put("is used to describe something that is indescribable or unspeakable and that cannot be expressed in words.","Ineffable");
        questions.put("attracting or seeking to attract attention, admiration, or envy.","Ostentatious");

        return questions;
    }

    public static Map<String,String> getQuestionsStage2(){
        HashMap<String,String> questions = new HashMap<>();
        questions.put("find (something or someone) Elect- choose (someone) to hold public office or some other position by voting.","Discover");
        questions.put("grow or cause to grow and become more mature, advanced, or elaborate.","Develop");
        questions.put("come or go back to a place or person.","Return");
        questions.put("a small piece of paper, fabric, plastic, or similar material attached to an object and giving information about it.","Label");
        questions.put("being the same in quantity, size, degree, or value.","Equal");
        questions.put("a scientific procedure to make a discovery, test a or demonstrate a known fact.","Experiment");
        questions.put("go away from.","Leave");
        questions.put("a man who has people working for him, especially servants or slaves.","Master");
        questions.put("known about by many people.","Famous");
        questions.put("not making any sound.","Silent");
        questions.put("a detailed proposal for doing or achieving something.","Plan");

        return questions;
    }

    public static Map<String,String> getQuestionsStage3(){
        HashMap<String,String> questions = new HashMap<>();
        questions.put("is the scientific study of life.","Biology");
        questions.put("is a commercial advertisement.","Trailer");
        questions.put("is the practice of cultivating plants and livestock.","Agriculture");
        questions.put("talk about (something) with another person or group of people.","Discuss");
        questions.put("to give back or restore (especially money); repay.","Refund");
        questions.put("a hot glowing body of ignited gas that is generated by something on fire.","Flames");
        questions.put("a main division of a book, typically with a number or title.","Chapter");
        questions.put("firmly press (something soft or yielding).","Squeeze");
        questions.put("rub out or remove (writing or marks).","Erase");
        questions.put("an abundance of valuable possessions or money.","Wealth");
        questions.put("a verbal or written answer.","Response");

        return questions;
    }

    public static Map<String,String> getQuestionsStage4(){
        HashMap<String,String> questions = new HashMap<>();
        questions.put("the outside limit of an object, area, or surface.","Edge");
        questions.put("come into or be in contact with.","Touch");
        questions.put("a room, set of rooms, or building used as a place for commercial, professional, or bureaucratic work.","Office");
        questions.put("lacking consideration for others; response- a verbal or written answer.","Selfish");
        questions.put("have the same opinion about something.","Agree");
        questions.put("take (something) away or off from the position occupied.","Remove");
        questions.put("the short, fine, soft hair of certain animals.","Fur");
        questions.put("very thin.","Skinny");
        questions.put("an idea or opinion produced by thinking.","Thought");
        questions.put("a person who plays a musical instrument.","Musician");
        questions.put("cause (someone) to believe in the truth of something.","Convince");

        return questions;
    }

    public static Map<String,String> getStageQuestions(Context context, String subject, int SIZE){
        HashMap<String,String> questionsMap = new HashMap<>();
        Map<String,String> originalQuestion;

        if (subject.equals(context.getString(R.string.stage_01))){
            originalQuestion = getQuestionsStage1();
        } else if (subject.equals(context.getString(R.string.stage_02))){
            originalQuestion = getQuestionsStage2();
        } else {
            originalQuestion = getQuestionsStage3();
        }

        int originalSize =  originalQuestion.size();
        ArrayList<String> keyList = new ArrayList<>(originalQuestion.keySet());

        while (questionsMap.size()<=SIZE){
            Random random = new Random();
            int randomNumber = random.nextInt(originalSize);
            String question = keyList.get(randomNumber);
            if (!questionsMap.containsKey(question)){
                questionsMap.put(question,originalQuestion.get(question));
            }
        }
        return questionsMap;
    }

    public static Map<String,String> getRandomQuestions(int SIZE){
        HashMap<String,String> questionsMap = new HashMap<>();
        Map<String,String> originalQuestion = new HashMap<>();

        originalQuestion = getQuestionsStage1();
        originalQuestion.putAll(getQuestionsStage2());
        originalQuestion.putAll(getQuestionsStage3());
        originalQuestion.putAll(getQuestionsStage4());

        int originalSize =  originalQuestion.size();
        System.out.println("SIZE: "+originalQuestion.size());
        ArrayList<String> keyList = new ArrayList<>(originalQuestion.keySet());

        while (questionsMap.size()<=SIZE){
            Random random = new Random();
            int randomNumber = random.nextInt(originalSize);
            String question = keyList.get(randomNumber);
            if (!questionsMap.containsKey(question)){
                questionsMap.put(question,originalQuestion.get(question));
            }
        }
        return questionsMap;
    }
}
